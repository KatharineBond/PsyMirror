@startuml

entity Пользователь {
    +id: int
    +имя: string
    +email: string
    +роль: enum {Испытуемый, Исследователь, Администратор}
    +датаРегистрации: datetime
    +статусАккаунта: enum {Активен, Заблокирован, ОжидаетПодтверждения}

    +авторизоваться(email: string, код: int): bool
    +редактироватьПрофиль()
    +удалитьАккаунт()
}

entity Испытуемый {
    +пол: enum {Мужской, Женский, Не задан}
    +датаРождения: date
    
    +пройтиТест(Тест)
    +просмотретьРезультаты(): РезультатТеста
    +записатьсяНаКонсультацию(Исследователь, datetime, List<Пользователь>, Оплата)
}

entity Исследователь {
    +фамилия: string
    +пол: enum {Мужской, Женский}
    +датаРождения: date
    +опытРаботы: int
    +опытРаботыДок: List<string>
    +высшееОбразование: int
    +высшееОбразованиеДок: List<string>
    +курсы: int
    +курсыДок: List<string>
    +специализация: List<string>
    +оСебе: string
    +фото: string
    +рейтинг: float
    +отзывы:  List<string>

    +пройтиТест(Тест)
    +просмотретьРезультаты(): РезультатТеста
    +записатьсяНаКонсультацию(Исследователь, datetime, List<Пользователь>, Оплата)
    +создатьМетодику(): Методика
    +анализироватьРезультаты(List<РезультатТеста>)
    +предложитьМетодику(): Методика
    +провестиКонсультацию(Консультация)
    +настроитьРасписание(List<datetime>)
}

entity Администратор {
    +проводитьСобеседования(Исследователь)
    +модерироватьМетодики(Методика)
    +анализироватьСтатистику(Статистика)
    +помогатьПользователям(string): string
}

entity Методика {
    +id: int
    +название: string
    +автор: Исследователь
    +дата: datetime
    +статус: enum {НаРассмотрении, Отклонён, Принят}

    +взятьНаРассмотрение()
    +отклонить()
    +принять()
}

entity Тест {
    +темы: List<string>
    +доступ: List<string>
    +литература: string
    +ссылки: string
    +инструкция: string
    +комментарий: string
    +задание: List<Вопрос>
    +файлЗадание: List<string>
    +обработка: List<Шкала>
    +файлОбработка: List<string>
    +интерпретация: string

    +изменить(Тест)
    +пройти()
    +подсчитатьРезультаты()
}

entity Вопрос {
    +id: int
    +текст: string
    +тип: enum {1ИзСписка, nИзСписка, 1ИзМатрицы, nИзМатрицы}
    +другое: bool
    +условие: string

    копировать(Вопрос): Вопрос
    удалить(Вопрос)
    добавить(): Вопрос
    изменить(Вопрос)
}

entity Шкала {
    +id: int
    +название: string
    +минимумы: List<float>
    +максимумы: List<float>
    +значения: string
    +описания: string
    +коэффициент: float

    копировать(Шкала): Шкала
    удалить(Шкала)
    добавить(): Шкала
    изменить(Шкала)
}

entity Вариант {
    +id: int
    +вопрос: int
    +текст: string
    +баллы: int
    +шкала: Шкала

    добавить(): Вариант
    изменить(Вариант)
}

entity РезультатТеста {
    +id: int
    +испытуемый: Испытуемый
    +тест: Тест
    +дата: datetime
    +шкалы: List<Шкала>
}

entity Консультация {
    +id: int
    +вид: enum {Индивидуальная, Групповая}
    +испытуемые: List<string>
    +специалист: Исследователь
    +дата: datetime
    +комментарий: string
    +ссылка: string
    +статус: enum {Запланирована, Завершена, Отменена}

    +оставитьОтзыв(int, string)
}

entity Оплата {
    +id: int
    +сумма: float
    +дата: datetime
    +статус: enum {Ожидает, Оплачено, Отменено}
    +метод: enum {Карта, ОПЛАТИ}
    +инициатор: Пользователь

    +запросВБанк()
}

entity Чат {
    +id: int
    +участники: List<Пользователь>
    +сообщения: json

    +создатьПереписку(): Чат
    +отправитьСообщение(Пользователь, string)
}

protocol Статистика {
    +пользователейВсего: int
    +пользователейАктивно: int
    +новыеМетодики: int
    +пройденныеТесты: int
    +записиНаКонсультации: int
    +среднийРейтинг: float
    +анализАктивности(): JSON
}


Пользователь <|-- Испытуемый
Пользователь <|-- Исследователь
Пользователь <|-- Администратор
Пользователь "2" --> "0..1" Чат: общается через

Испытуемый "0..*" --> "0..*" Консультация: записывается
Испытуемый "0..*" --> "0..*" Тест: проходит
Испытуемый "0..*" --> "0..*" РезультатТеста: просматривает

Исследователь "1..*" --> "0..*" Методика: разрабатывает
Исследователь "0..*" --> "0..*" РезультатТеста: анализирует
Исследователь "1" --> "0..*" Консультация: проводит

Администратор "1..*" --> "1" Статистика: анализирует
Администратор "1" --> "1" Исследователь: собеседует
Администратор "1" --> "0..*" Методика: модерирует

Методика <|-- Тест

Тест *-- "1..*" Вопрос: содержится

Вопрос *-- "1..*" Вариант: содержится

Вариант "0..1" --o Шкала: привязанК

РезультатТеста *-- "1..*" Шкала: интерпретирует

Консультация "1" --> "1" Оплата: требует

@enduml